Projeto de IdentificaÃ§Ã£o e AutenticaÃ§Ã£o BiomÃ©trica (APS 5Âº/6Âº Sem)

ðŸ“‚ Estrutura de Pastas
A estrutura foi pensada para ser ortogonal, separando as responsabilidades:

biometric-auth-system/
â”‚
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ images_to_register/     # imagens para cadastrar novos usuÃ¡rios
â”‚   â””â”€â”€ images_to_authenticate/ # imagens para testar a autenticaÃ§Ã£o
â”‚
â”œâ”€â”€ notebooks/                  # Jupyter notebooks para testes e prototipagem (opcional)
â”‚   â””â”€â”€ 1-testando-extracao.ipynb
â”‚
â”œâ”€â”€ src/                        # Todo o cÃ³digo fonte da aplicaÃ§Ã£o
â”‚   â”œâ”€â”€ biometrics/             # MÃ³dulos relacionados Ã  lÃ³gica biomÃ©trica
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ feature_extractor.py  # FunÃ§Ã£o para extrair caracterÃ­sticas da imagem
â”‚   â”‚   â””â”€â”€ matcher.py            # FunÃ§Ã£o para comparar duas biometrias
â”‚   â”‚
â”‚   â”œâ”€â”€ database/               # MÃ³dulo para gerenciar o banco de dados
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â””â”€â”€ database_manager.py   # Classe que lida com todas as operaÃ§Ãµes do BD
â”‚   â”‚
â”‚   â””â”€â”€ models/                 # Classes que representam os dados (opcional, mas boa prÃ¡tica)
â”‚       â”œâ”€â”€ __init__.py
â”‚       â””â”€â”€ user.py               # Classe/modelo para representar um usuÃ¡rio
â”‚
â”œâ”€â”€ tests/                      # Testes unitÃ¡rios para garantir que tudo funciona
â”‚   â”œâ”€â”€ __init__.py
â”‚   â””â”€â”€ test_database.py
â”‚
â”œâ”€â”€ .gitignore                  # Arquivo para ignorar arquivos desnecessÃ¡rios no Git
â”œâ”€â”€ main.py                     # Ponto de entrada da aplicaÃ§Ã£o, onde tudo Ã© orquestrado
â”œâ”€â”€ requirements.txt            # Lista de bibliotecas Python necessÃ¡rias
â””â”€â”€ biometric_database.db       # O arquivo do banco de dados SQLite (serÃ¡ criado na 1Âª execuÃ§Ã£o)

Como Executar o Projeto
Clone o repositÃ³rio:

git clone <url-do-seu-repositorio>
cd biometric-auth-system

Crie um ambiente virtual (recomendado):

python -m venv .venv
source .venv/bin/activate  # No Windows: .venv\Scripts\activate

Instale as dependÃªncias:

pip install -r requirements.txt

Execute a aplicaÃ§Ã£o principal:

python main.py
